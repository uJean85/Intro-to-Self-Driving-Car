%%HTML
<link rel="stylesheet" type="text/css" href="buttonStyle.css">
<button id="launcher">Load Car Simulator </button>
<button id="restart">Restart Connection</button>
<script src="setupLauncher.js"></script><div id="simulator_frame"></sim>
<script src="kernelRestart.js"></script>

# CODE CELL

# Important notes: please do the following steps before you re-run your code on the simulator
# 1) Click "Restart Connection" button on the cell above and wait for a minute for the kernel to get ready.
# 2) Run this code cell (press Control+Enter)  and as the code cell starts running,
# 3) Click "Reset button" on the simulator
#    (If you don't see the "Reset" button inside the simulator, please click "Load Car Simulator" button again)


# Once again, the steer value can be from -25 and 25
# Your throttle and brake can be from -1 to 1
car_parameters = {"throttle": 0, "steer": 0, "brake": 0}

def control(pos_x, pos_y, time, velocity):
    """ Controls the simulated car"""
    global car_parameters
    
    
    # TODO: Use WASD keys in simulator to gain an intuitive feel of parallel parking.
    # Pay close attention to the time, position, and velocity in the simulator.
    
    # TODO: Use this information to make decisions about how to set your car parameters
    
    # In this example the car will drive forward for three seconds
    # and then backs up until its pos_y is less than 32 then comes to a stop by braking
    if time < 3:
        car_parameters['throttle'] = 0.5
    elif pos_y > 40.5 and pos_x < 128:
        car_parameters['throttle'] = -1
    elif pos_y > 35.9 or pos_x < 125.9:
        car_parameters['throttle'] = -0.5
        car_parameters['steer']    = 5
    elif pos_y >32.6:
        car_parameters['throttle'] = -0.2
        car_parameters['steer'] = -5
    else:
        if pos_y < 32:
            car_parameters['steer']    = 0
            car_parameters['throttle'] = 2
        else:
            car_parameters['brake'] = 1
    
    return car_parameters
    
import src.simulate as sim
sim.run(control)
